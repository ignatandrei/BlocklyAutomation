// <auto-generated />
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do:
//
//    using WindowsRelated;
//
//    var r = Root.FromJson(jsonString);
#nullable enable
#pragma warning disable CS8618
#pragma warning disable CS8601
#pragma warning disable CS8603

using System.Text.Json;
using System.Text.Json.Serialization;
using System.Globalization;

namespace WindowsRelated;

/// <summary>
/// Describes a list of packages for batch installs
/// </summary>
public partial class Root
{
    /// <summary>
    /// Date when this list was generated (ex. 2021-05-16T22:24:39.287-00:00)
    /// </summary>
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonPropertyName("CreationDate")]
    public DateTimeOffset? CreationDate { get; set; }

    /// <summary>
    /// Sources from which each package comes from
    /// </summary>
    [JsonPropertyName("Sources")]
    public Source[] Sources { get; set; }

    /// <summary>
    /// Version of winget that generated this file
    /// </summary>
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonPropertyName("WinGetVersion")]
    public string WinGetVersion { get; set; }
}

/// <summary>
/// A source and the list of packages to install from it
/// </summary>
public partial class Source
{
    /// <summary>
    /// Packages installed from this source
    /// </summary>
    [JsonPropertyName("Packages")]
    public Package[] Packages { get; set; }

    /// <summary>
    /// Details about this source
    /// </summary>
    [JsonPropertyName("SourceDetails")]
    public SourceDetails SourceDetails { get; set; }
}

/// <summary>
/// A package to be installed from this source
/// </summary>
public partial class Package
{
    /// <summary>
    /// Package channel
    /// </summary>
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonPropertyName("Channel")]
    public string Channel { get; set; }

    /// <summary>
    /// Package ID
    /// </summary>
    [JsonPropertyName("PackageIdentifier")]
    public string PackageIdentifier { get; set; }

    /// <summary>
    /// Required package scope
    /// </summary>
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonPropertyName("Scope")]
    public Scope? Scope { get; set; }

    /// <summary>
    /// Package version
    /// </summary>
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonPropertyName("Version")]
    public string Version { get; set; }
}

/// <summary>
/// Details about this source
/// </summary>
public partial class SourceDetails
{
    /// <summary>
    /// Argument used to install the source
    /// </summary>
    [JsonPropertyName("Argument")]
    public string Argument { get; set; }

    /// <summary>
    /// Identifier for the source
    /// </summary>
    [JsonPropertyName("Identifier")]
    public string Identifier { get; set; }

    /// <summary>
    /// Name of the source
    /// </summary>
    [JsonPropertyName("Name")]
    public string Name { get; set; }

    /// <summary>
    /// Type of the source
    /// </summary>
    [JsonPropertyName("Type")]
    public string Type { get; set; }
}

/// <summary>
/// Required package scope
/// </summary>
public enum Scope { Machine, User };

public partial class Root
{
    public static Root? FromJson(string? json)
    {
        if (json == null)
            return null;
        return JsonSerializer.Deserialize<Root>(json, WindowsRelated.Converter.Settings);
    }
}

public static class Serialize
{
    public static string ToJson(this Root self) => JsonSerializer.Serialize(self, WindowsRelated.Converter.Settings);
}

internal static class Converter
{
    public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.General)
    {
        Converters =
        {
            ScopeConverter.Singleton,
            new DateOnlyConverter(),
            new TimeOnlyConverter(),
            IsoDateTimeOffsetConverter.Singleton
        },
    };
}

internal class ScopeConverter : JsonConverter<Scope>
{
    public override bool CanConvert(Type t) => t == typeof(Scope);

    public override Scope Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        var value = reader.GetString();
        switch (value)
        {
            case "machine":
                return Scope.Machine;
            case "user":
                return Scope.User;
        }
        throw new Exception("Cannot unmarshal type Scope");
    }

    public override void Write(Utf8JsonWriter writer, Scope value, JsonSerializerOptions options)
    {
        switch (value)
        {
            case Scope.Machine:
                JsonSerializer.Serialize(writer, "machine", options);
                return;
            case Scope.User:
                JsonSerializer.Serialize(writer, "user", options);
                return;
        }
        throw new Exception("Cannot marshal type Scope");
    }

    public static readonly ScopeConverter Singleton = new ScopeConverter();
}

public class DateOnlyConverter : JsonConverter<DateOnly>
{
    private readonly string serializationFormat;
    public DateOnlyConverter() : this(null) { }

    public DateOnlyConverter(string? serializationFormat)
    {
        this.serializationFormat = serializationFormat ?? "yyyy-MM-dd";
    }

    public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        var value = reader.GetString();
        return DateOnly.Parse(value!);
    }

    public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)
        => writer.WriteStringValue(value.ToString(serializationFormat));
}

public class TimeOnlyConverter : JsonConverter<TimeOnly>
{
    private readonly string serializationFormat;

    public TimeOnlyConverter() : this(null) { }

    public TimeOnlyConverter(string? serializationFormat)
    {
        this.serializationFormat = serializationFormat ?? "HH:mm:ss.fff";
    }

    public override TimeOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        var value = reader.GetString();
        return TimeOnly.Parse(value!);
    }

    public override void Write(Utf8JsonWriter writer, TimeOnly value, JsonSerializerOptions options)
        => writer.WriteStringValue(value.ToString(serializationFormat));
}

internal class IsoDateTimeOffsetConverter : JsonConverter<DateTimeOffset>
{
    public override bool CanConvert(Type t) => t == typeof(DateTimeOffset);

    private const string DefaultDateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";

    private DateTimeStyles _dateTimeStyles = DateTimeStyles.RoundtripKind;
    private string? _dateTimeFormat;
    private CultureInfo? _culture;

    public DateTimeStyles DateTimeStyles
    {
        get => _dateTimeStyles;
        set => _dateTimeStyles = value;
    }

    public string? DateTimeFormat
    {
        get => _dateTimeFormat ?? string.Empty;
        set => _dateTimeFormat = (string.IsNullOrEmpty(value)) ? null : value;
    }

    public CultureInfo Culture
    {
        get => _culture ?? CultureInfo.CurrentCulture;
        set => _culture = value;
    }

    public override void Write(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options)
    {
        string text;


        if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal
            || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal)
        {
            value = value.ToUniversalTime();
        }

        text = value.ToString(_dateTimeFormat ?? DefaultDateTimeFormat, Culture);

        writer.WriteStringValue(text);
    }

    public override DateTimeOffset Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        string? dateText = reader.GetString();

        if (string.IsNullOrEmpty(dateText) == false)
        {
            if (!string.IsNullOrEmpty(_dateTimeFormat))
            {
                return DateTimeOffset.ParseExact(dateText, _dateTimeFormat, Culture, _dateTimeStyles);
            }
            else
            {
                return DateTimeOffset.Parse(dateText, Culture, _dateTimeStyles);
            }
        }
        else
        {
            return default(DateTimeOffset);
        }
    }


    public static readonly IsoDateTimeOffsetConverter Singleton = new IsoDateTimeOffsetConverter();
}
#pragma warning restore CS8618
#pragma warning restore CS8601
#pragma warning restore CS8603
